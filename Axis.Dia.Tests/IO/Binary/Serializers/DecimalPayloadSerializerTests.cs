using Axis.Dia.Contracts;
using Axis.Dia.IO.Binary;
using Axis.Dia.IO.Binary.Metadata;
using Axis.Dia.IO.Binary.Serializers;
using Axis.Dia.Types;
using Axis.Luna.Common;
using Axis.Luna.Common.Numerics;
using Axis.Luna.Common.Results;
using Axis.Luna.Extensions;
using System.Numerics;

namespace Axis.Dia.Tests.IO.Binary.Serializers
{
    [TestClass]
    public class DecimalPayloadSerializerTests
    {
        [TestMethod]
        public void CreatePayload_Tests()
        {
            var nullValue = DecimalValue.Null();
            var payload = DecimalPayloadSerializer.CreatePayload(nullValue);

            Assert.IsTrue(payload.TypeMetadata.IsNull);
            Assert.IsFalse(payload.TypeMetadata.IsAnnotated);
            Assert.IsFalse(payload.TypeMetadata.IsCustomFlagSet);
            Assert.IsFalse(payload.TypeMetadata.IsOverflowFlagSet);
            Assert.AreEqual(0, payload.TypeMetadata.CustomMetadataCount);
            Assert.AreEqual(DiaType.Decimal, payload.TypeMetadata.Type);


            DecimalValue zeroValue = BigDecimal.Zero;
            payload = DecimalPayloadSerializer.CreatePayload(zeroValue);

            Assert.IsFalse(payload.TypeMetadata.IsNull);
            Assert.IsFalse(payload.TypeMetadata.IsAnnotated);
            Assert.IsFalse(payload.TypeMetadata.IsCustomFlagSet);
            Assert.IsFalse(payload.TypeMetadata.IsOverflowFlagSet);
            Assert.AreEqual(0, payload.TypeMetadata.CustomMetadataCount);


            DecimalValue oneValue = DecimalValue.Of(BigDecimal.One, "annotated");
            payload = DecimalPayloadSerializer.CreatePayload(oneValue);

            Assert.IsFalse(payload.TypeMetadata.IsNull);
            Assert.IsTrue(payload.TypeMetadata.IsAnnotated);
            Assert.IsFalse(payload.TypeMetadata.IsCustomFlagSet);
            Assert.IsTrue(payload.TypeMetadata.IsOverflowFlagSet);
            Assert.AreEqual(1, payload.TypeMetadata.CustomMetadataCount);
            Assert.AreEqual(7, payload.TypeMetadata.CustomMetadata[0].DataByteValue);


            DecimalValue value = 2.3m;
            payload = DecimalPayloadSerializer.CreatePayload(value);

            Assert.IsFalse(payload.TypeMetadata.IsNull);
            Assert.IsFalse(payload.TypeMetadata.IsAnnotated);
            Assert.IsFalse(payload.TypeMetadata.IsCustomFlagSet);
            Assert.IsTrue(payload.TypeMetadata.IsOverflowFlagSet);
            Assert.AreEqual(1, payload.TypeMetadata.CustomMetadataCount);
            Assert.AreEqual(5, payload.TypeMetadata.CustomMetadata[0].DataByteValue);


            value = 0.7m;
            payload = DecimalPayloadSerializer.CreatePayload(value);

            Assert.IsFalse(payload.TypeMetadata.IsNull);
            Assert.IsFalse(payload.TypeMetadata.IsAnnotated);
            Assert.IsFalse(payload.TypeMetadata.IsCustomFlagSet);
            Assert.IsTrue(payload.TypeMetadata.IsOverflowFlagSet);
            Assert.AreEqual(1, payload.TypeMetadata.CustomMetadataCount);
            Assert.AreEqual(5, payload.TypeMetadata.CustomMetadata[0].DataByteValue);


            value = 0.0012m;
            payload = DecimalPayloadSerializer.CreatePayload(value);

            Assert.IsFalse(payload.TypeMetadata.IsNull);
            Assert.IsFalse(payload.TypeMetadata.IsAnnotated);
            Assert.IsFalse(payload.TypeMetadata.IsCustomFlagSet);
            Assert.IsTrue(payload.TypeMetadata.IsOverflowFlagSet);
            Assert.AreEqual(1, payload.TypeMetadata.CustomMetadataCount);
            Assert.AreEqual(5, payload.TypeMetadata.CustomMetadata[0].DataByteValue);


            value = 45000;
            payload = DecimalPayloadSerializer.CreatePayload(value);

            Assert.IsFalse(payload.TypeMetadata.IsNull);
            Assert.IsFalse(payload.TypeMetadata.IsAnnotated);
            Assert.IsFalse(payload.TypeMetadata.IsCustomFlagSet);
            Assert.IsTrue(payload.TypeMetadata.IsOverflowFlagSet);
            Assert.AreEqual(1, payload.TypeMetadata.CustomMetadataCount);
            Assert.AreEqual(7, payload.TypeMetadata.CustomMetadata[0].DataByteValue);


            value = 1110000;
            payload = DecimalPayloadSerializer.CreatePayload(value);

            Assert.IsFalse(payload.TypeMetadata.IsNull);
            Assert.IsFalse(payload.TypeMetadata.IsAnnotated);
            Assert.IsFalse(payload.TypeMetadata.IsCustomFlagSet);
            Assert.IsTrue(payload.TypeMetadata.IsOverflowFlagSet);
            Assert.AreEqual(1, payload.TypeMetadata.CustomMetadataCount);
            Assert.AreEqual(7, payload.TypeMetadata.CustomMetadata[0].DataByteValue);


            value = 0.000000256m;
            payload = DecimalPayloadSerializer.CreatePayload(value);

            Assert.IsFalse(payload.TypeMetadata.IsNull);
            Assert.IsFalse(payload.TypeMetadata.IsAnnotated);
            Assert.IsFalse(payload.TypeMetadata.IsCustomFlagSet);
            Assert.IsTrue(payload.TypeMetadata.IsOverflowFlagSet);
            Assert.AreEqual(1, payload.TypeMetadata.CustomMetadataCount);
            Assert.AreEqual(9, payload.TypeMetadata.CustomMetadata[0].DataByteValue);

            var bigInt = BigDecimal
                .Parse(
                    "999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999"
                    + "999999999999999999999999999999999999999999999999999999.9999999999999999999999999999"
                    + "9999999999999999999999999999999999999999999999999999999999999999999999999999999999")
                .Resolve();

            value = bigInt;
            payload = DecimalPayloadSerializer.CreatePayload(value);

            Assert.IsFalse(payload.TypeMetadata.IsNull);
            Assert.IsFalse(payload.TypeMetadata.IsAnnotated);
            Assert.IsFalse(payload.TypeMetadata.IsCustomFlagSet);
            Assert.IsTrue(payload.TypeMetadata.IsOverflowFlagSet);
            Assert.AreEqual(2, payload.TypeMetadata.CustomMetadataCount);
            Assert.AreEqual(9, payload.TypeMetadata.CustomMetadata[0].DataByteValue);
            Assert.AreEqual(50, payload.TypeMetadata.CustomMetadata[1].DataByteValue);
        }

        [TestMethod]
        public void Serialize_Tests()
        {
            var nullValue = DecimalValue.Null();
            var result = DecimalPayloadSerializer.Serialize(nullValue, new Dia.IO.Binary.BinarySerializerContext());
            Assert.IsTrue(result.IsDataResult());
            var data = result.Resolve();
            Assert.AreEqual(1, data.Length);
            Assert.AreEqual(36, data[0]);


            DecimalValue zeroValue = 0;
            result = DecimalPayloadSerializer.Serialize(zeroValue, new Dia.IO.Binary.BinarySerializerContext());
            Assert.IsTrue(result.IsDataResult());
            data = result.Resolve();
            Assert.AreEqual(1, data.Length);
            Assert.AreEqual(4, data[0]);


            DecimalValue oneValue = 1;
            result = DecimalPayloadSerializer.Serialize(oneValue, new Dia.IO.Binary.BinarySerializerContext());
            Assert.IsTrue(result.IsDataResult());
            data = result.Resolve();
            Assert.AreEqual(4, data.Length);
            Assert.AreEqual(132, data[0]);
            Assert.AreEqual(7, data[1]);
            Assert.AreEqual(0, data[2]); // scale
            Assert.AreEqual(1, data[3]);


            oneValue = DecimalValue.Of(1, "annotation1", "annotation2");
            result = DecimalPayloadSerializer.Serialize(oneValue, new Dia.IO.Binary.BinarySerializerContext());
            Assert.IsTrue(result.IsDataResult());
            data = result.Resolve();
            Assert.AreEqual(51, data.Length);
            Assert.AreEqual(148, data[0]); // tmeta
            Assert.AreEqual(7, data[1]);   // sig byte count
            Assert.AreEqual(2, data[2]);   // annotation count


            DecimalValue otherInt = 122.2m;
            result = DecimalPayloadSerializer.Serialize(otherInt, new Dia.IO.Binary.BinarySerializerContext());
            Assert.IsTrue(result.IsDataResult());
            data = result.Resolve();
            Assert.AreEqual(5, data.Length);
            Assert.AreEqual(132, data[0]); // tmeta
            Assert.IsTrue(data[1].IsSet(0));   // sig sign
            Assert.IsFalse(data[1].IsSet(1));   // scale sign
            Assert.AreEqual(2, data[1] >> 2);   // sig byte count
            Assert.AreEqual(1, data[2]); // Math.Abs(scale)
            Assert.AreEqual(198, data[3]);   // sig byte[0]
            Assert.AreEqual(4, data[4]); // sig byte[1]


            otherInt = 65.536m;
            result = DecimalPayloadSerializer.Serialize(otherInt, new Dia.IO.Binary.BinarySerializerContext());
            Assert.IsTrue(result.IsDataResult());
            data = result.Resolve();
            Assert.AreEqual(6, data.Length);
            Assert.AreEqual(132, data[0]);     // tmeta
            Assert.IsTrue(data[1].IsSet(0));   // sig sign
            Assert.IsFalse(data[1].IsSet(1));  // scale sign
            Assert.AreEqual(3, data[1] >> 2);   // sig byte count
            Assert.AreEqual(3, data[2]); // Math.Abs(scale)
            Assert.AreEqual(0, data[3]);
            Assert.AreEqual(0, data[4]);
            Assert.AreEqual(1, data[5]);

            otherInt = BigDecimal.Parse("18446744073709551616").Resolve();
            result = DecimalPayloadSerializer.Serialize(otherInt, new Dia.IO.Binary.BinarySerializerContext());
            Assert.IsTrue(result.IsDataResult());
            data = result.Resolve();
            Assert.AreEqual(12, data.Length);
            Assert.AreEqual(132, data[0]);
            Assert.AreEqual(39, data[1]);
            Assert.IsTrue(data[1].IsSet(0));   // sig sign
            Assert.IsTrue(data[1].IsSet(1));   // scale sign
            Assert.AreEqual(9, data[1] >> 2);  // sig byte count
            Assert.AreEqual(0, data[2]); // scale


            otherInt = BigDecimal
                .Parse(
                    "18446744073709551616000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
                .Resolve();
            result = DecimalPayloadSerializer.Serialize(otherInt, new Dia.IO.Binary.BinarySerializerContext());
            Assert.IsTrue(result.IsDataResult());
            data = result.Resolve();
            Assert.AreEqual(13, data.Length);
            Assert.AreEqual(132, data[0]);
            Assert.AreEqual(39, data[1]); // byte count
            Assert.IsTrue(data[1].IsSet(0));   // sig sign
            Assert.IsTrue(data[1].IsSet(1));   // scale sign
            Assert.AreEqual(9, data[1] >> 2);  // sig byte count
            Assert.AreEqual(202, data[2]); // scale


            otherInt = BigDecimal
                .Parse(
                    "1844674407370955161.6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001")
                .Resolve();
            result = DecimalPayloadSerializer.Serialize(otherInt, new Dia.IO.Binary.BinarySerializerContext());
            Assert.IsTrue(result.IsDataResult());
            data = result.Resolve();
            Assert.AreEqual(1365, data.Length);
            Assert.AreEqual(132, data[0]);     // tmeta
            Assert.AreEqual(193, data[1]);     // cmeta[0]
            Assert.AreEqual(42, data[2]);      // cmeta[1]
            Assert.IsTrue(data[1].IsSet(0));   // sig sign
            Assert.IsFalse(data[1].IsSet(1));  // scale sign
            var byteCount = VarBytes
                .Of(data[1..3], false)
                .ToByteArray()
                .ApplyTo(BitSequence.Of)
                .RightShift(2)
                .ApplyTo(bits => new BigInteger(bits.ToByteArray(), true));
            Assert.AreEqual(1360, byteCount);
            var scale = VarBytes
                .Of(data[3..5], false)
                .ToByteArray()
                .ApplyTo(bytes => new BigInteger(bytes, true));
            Assert.AreEqual(3256, scale);
        }

        [TestMethod]
        public void Deserialize_Tests()
        {
            var nullValue = DecimalValue.Null();
            var bytes = DecimalPayloadSerializer
                .Serialize(nullValue, new Dia.IO.Binary.BinarySerializerContext())
                .Resolve();
            var result = DecimalPayloadSerializer.Deserialize(
                new MemoryStream(),
                TypeMetadata.Of(bytes[0]),
                new Dia.IO.Binary.BinarySerializerContext());
            Assert.IsTrue(result.IsDataResult());
            var resultValue = result.Resolve();
            Assert.AreEqual(nullValue, resultValue);


            DecimalValue value = 0;
            bytes = DecimalPayloadSerializer
                .Serialize(value, new Dia.IO.Binary.BinarySerializerContext())
                .Resolve();
            result = DecimalPayloadSerializer.Deserialize(
                new MemoryStream(),
                TypeMetadata.Of(bytes[0]),
                new Dia.IO.Binary.BinarySerializerContext());
            Assert.IsTrue(result.IsDataResult());
            resultValue = result.Resolve();
            Assert.AreEqual(value, resultValue);


            value = 1;
            bytes = DecimalPayloadSerializer
                .Serialize(value, new Dia.IO.Binary.BinarySerializerContext())
                .Resolve();
            result = DecimalPayloadSerializer.Deserialize(
                new MemoryStream(bytes[2..]),
                TypeMetadata.Of(bytes[0], CustomMetadata.Of(bytes[1])),
                new Dia.IO.Binary.BinarySerializerContext());
            Assert.IsTrue(result.IsDataResult());
            resultValue = result.Resolve();
            Assert.AreEqual(value, resultValue);


            value = 1565.4345m;
            bytes = DecimalPayloadSerializer
                .Serialize(value, new Dia.IO.Binary.BinarySerializerContext())
                .Resolve();
            result = DecimalPayloadSerializer.Deserialize(
                new MemoryStream(bytes[2..]),
                TypeMetadata.Of(bytes[0], CustomMetadata.Of(bytes[1])),
                new Dia.IO.Binary.BinarySerializerContext());
            Assert.IsTrue(result.IsDataResult());
            resultValue = result.Resolve();
            Assert.AreEqual(value, resultValue);


            value = -11.12212m;
            bytes = DecimalPayloadSerializer
                .Serialize(value, new Dia.IO.Binary.BinarySerializerContext())
                .Resolve();
            result = DecimalPayloadSerializer.Deserialize(
                new MemoryStream(bytes[2..]),
                TypeMetadata.Of(bytes[0], CustomMetadata.Of(bytes[1])),
                new Dia.IO.Binary.BinarySerializerContext());
            Assert.IsTrue(result.IsDataResult());
            resultValue = result.Resolve();
            Assert.AreEqual(value, resultValue);


            value = -65.536m;
            bytes = DecimalPayloadSerializer
                .Serialize(value, new Dia.IO.Binary.BinarySerializerContext())
                .Resolve();
            result = DecimalPayloadSerializer.Deserialize(
                new MemoryStream(bytes[2..]),
                TypeMetadata.Of(bytes[0], CustomMetadata.Of(bytes[1])),
                new Dia.IO.Binary.BinarySerializerContext());
            Assert.IsTrue(result.IsDataResult());
            resultValue = result.Resolve();
            Assert.AreEqual(value, resultValue);


            value = BigDecimal
                .Parse(
                    "18446744073709551616000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
                .Resolve();
            bytes = DecimalPayloadSerializer
                .Serialize(value, new Dia.IO.Binary.BinarySerializerContext())
                .Resolve();
            result = DecimalPayloadSerializer.Deserialize(
                new MemoryStream(bytes[2..]),
                TypeMetadata.Of(bytes[0], CustomMetadata.Of(bytes[1])),
                new Dia.IO.Binary.BinarySerializerContext());
            Assert.IsTrue(result.IsDataResult());
            resultValue = result.Resolve();
            Assert.AreEqual(value, resultValue);


            value = BigDecimal
                .Parse(
                    "184467440737.09551616000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
                .Resolve();
            bytes = DecimalPayloadSerializer
                .Serialize(value, new Dia.IO.Binary.BinarySerializerContext())
                .Resolve();
            result = DecimalPayloadSerializer.Deserialize(
                new MemoryStream(bytes[2..]),
                TypeMetadata.Of(bytes[0], CustomMetadata.Of(bytes[1])),
                new Dia.IO.Binary.BinarySerializerContext());
            Assert.IsTrue(result.IsDataResult());
            resultValue = result.Resolve();
            Assert.AreEqual(value, resultValue);


            value = BigDecimal
                .Parse(
                    "-184467440737.09551616000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002")
                .Resolve();
            bytes = DecimalPayloadSerializer
                .Serialize(value, new Dia.IO.Binary.BinarySerializerContext())
                .Resolve();
            result = DecimalPayloadSerializer.Deserialize(
                new MemoryStream(bytes[3..]),
                TypeMetadata.Of(bytes[0], bytes[1], bytes[2]),
                new Dia.IO.Binary.BinarySerializerContext());
            Assert.IsTrue(result.IsDataResult());
            resultValue = result.Resolve();
            Assert.AreEqual(value, resultValue);
        }
    }
}
